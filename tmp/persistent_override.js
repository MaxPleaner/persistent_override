// Generated by CoffeeScript 1.10.0
var PO, PersistentOverride;

PersistentOverride = {
  clear: function() {
    firebaseRemove("regexes");
    return firebaseRemove("sourceCode");
  },
  defineScript: function(object, regex) {
    var regexStr, scriptSrc;
    regexStr = regex.toString();
    scriptSrc = object.toSource();
    return firebasePush("sourceCode", scriptSrc).then(function(sourceKey) {
      var regexObj;
      regexObj = {
        regex: regexStr,
        sourceKey: sourceKey
      };
      return firebasePush("regexes", regexObj).then(function(regexKey) {
        return ["sourceCode/" + sourceKey, "regexes/" + regexKey];
      });
    });
  },
  defineScriptForCurrentSite: function(object) {
    var curriedFn;
    curriedFn = curry(PO.defineScript)(object);
    return PO.forCurrentSite(curriedFn);
  },
  getScriptsForCurrentSite: function() {
    return PO.getScriptsForSite(PO.getCorrectLocationOrigin());
  },
  getScriptsForSite: function(sitename) {
    return firebaseGetArr("regexes").then(function(list) {
      var matches;
      if (Array.isArray(list)) {
        matches = list.filter(function(regexObj) {
          var actualRegex;
          actualRegex = PersistentOverride.regexFromString(regexObj.regex);
          return (sitename.constructor === String) && (sitename.match(actualRegex));
        });
        return matches.map(function(regexObj) {
          var actualRegex, scriptSrcPromise, sourceKey;
          sourceKey = regexObj.sourceKey;
          actualRegex = PersistentOverride.regexFromString(regexObj.regex);
          scriptSrcPromise = firebaseGet("sourceCode/" + sourceKey);
          return {
            regex: actualRegex,
            scriptSrc: scriptSrcPromise
          };
        });
      } else {
        return [];
      }
    });
  },
  getScriptsForAllSites: function() {
    return firebaseGetArr("regexes").then(function(objects) {
      var results;
      if (Array.isArray(objects)) {
        return results = objects.map(function(rejexObj) {
          var actualRegex, scriptSrcPromise, sourceKey;
          actualRegex = PersistentOverride.regexFromString(rejexObj.regex);
          sourceKey = rejexObj.sourceKey;
          scriptSrcPromise = firebaseGet("sourceCode/" + sourceKey);
          return {
            regex: actualRegex,
            scriptSrc: scriptSrcPromise
          };
        });
      } else {
        return results;
      }
    });
  },
  regexFromString: function(string) {
    var parts;
    parts = /\/(.*)\/(.*)/.exec(string);
    return new RegExp(parts[1], parts[2]);
  },
  escapeRegExp: function(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
  },
  getCorrectLocationOrigin: function() {
    var prevOrigins;
    prevOrigins = location.ancestorOrigins;
    if (prevOrigins.length > 0) {
      return prevOrigins[0];
    } else {
      return location.origin;
    }
  },
  forAllSites: function(fn) {
    return fn(/.+/);
  },
  forCurrentSite: function(fn) {
    var currentPageRegexString, finalRegexString;
    currentPageRegexString = PersistentOverride.escapeRegExp(PersistentOverride.getCorrectLocationOrigin());
    finalRegexString = "^" + currentPageRegexString + ".?";
    return fn(new RegExp(finalRegexString));
  },
  scriptRef: {},
  pageScripts: {},
  loadCurrentSiteScripts: function() {
    return PO.getScriptsForCurrentSite().then(function(scripts) {
      return scripts.forEach(function(scriptObj) {
        return scriptObj.scriptSrc.then(function(srcString) {
          eval("PO.scriptRef = " + srcString);
          return PO.copyScriptRefToPageScripts();
        });
      });
    });
  },
  copyScriptRefToPageScripts: function() {
    var scriptRef;
    scriptRef = PO.scriptRef;
    if (scriptRef && (typeof scriptRef === 'object') && !(Array.isArray(scriptRef))) {
      return Object.keys(scriptRef).forEach(function(key) {
        return PO.pageScripts[key] = scriptRef[key];
      });
    }
  },
  init: function() {
    firebase.initializeApp(config);
    return firebaseSignIn().then(function() {
      return PO.loadCurrentSiteScripts();
    });
  }
};

PO = PersistentOverride;
